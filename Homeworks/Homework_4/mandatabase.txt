LS(1)                           User Commands                           LS(1)

NAME
       ls - list directory contents

SYNOPSIS
       ls [OPTION]... [FILE]...

DESCRIPTION
       List  information  about the FILEs (the current directory by default).
       Sort entries alphabetically if none of -cftuvSUX nor --sort is  speci‐
       fied.

       Mandatory  arguments  to  long options are mandatory for short options
       too.

       -a, --all
              do not ignore entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              with -l, print the author of each file

       -b, --escape
              print C-style escapes for nongraphic characters

       --block-size=SIZE
              with  -l,  scale  sizes  by  SIZE  when  printing  them;  e.g.,
              '--block-size=M'; see SIZE format below

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with  -lt:  sort by, and show, ctime (time of last modification
              of file status information); with -l: show ctime  and  sort  by
              name; otherwise: sort by ctime, newest first

       -C     list entries by columns

       --color[=WHEN]
              colorize the output; WHEN can be 'always' (default if omitted),
              'auto', or 'never'; more info below

       -d, --directory
              list directories themselves, not their contents

       -D, --dired
              generate output designed for Emacs' dired mode

       -f     do not sort, enable -aU, disable -ls --color

       -F, --classify
              append indicator (one of */=>@|) to entries

       --file-type
              likewise, except do not append '*'

       --format=WORD
              across -x, commas -m, horizontal -x, long -l, single-column -1,
              verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       --group-directories-first
              group directories before files;

              can  be  augmented  with  a  --sort  option,  but  any  use  of
              --sort=none (-U) disables grouping

       -G, --no-group
              in a long listing, don't print group names

       -h, --human-readable
              with -l and -s, print sizes like 1K 234M 2G etc.

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --hide=PATTERN
              do not list implied entries matching shell PATTERN  (overridden
              by -a or -A)

       --hyperlink[=WHEN]
              hyperlink  file  names;  WHEN can be 'always' (default if omit‐
              ted), 'auto', or 'never'

       --indicator-style=WORD
              append indicator with style WORD  to  entry  names:  none  (de‐
              fault), slash (-p), file-type (--file-type), classify (-F)

       -i, --inode
              print the index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k, --kibibytes
              default  to  1024-byte blocks for disk usage; used only with -s
              and per directory totals

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show  infor‐
              mation  for  the  file  the link references rather than for the
              link itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric user and group IDs

       -N, --literal
              print entry names without quoting

       -o     like -l, but do not list group information

       -p, --indicator-style=slash
              append / indicator to directories

       -q, --hide-control-chars
              print ? instead of nongraphic characters

       --show-control-chars
              show nongraphic characters as-is (the default,  unless  program
              is 'ls' and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale, shell,
              shell-always,  shell-escape,  shell-escape-always,  c,   escape
              (overrides QUOTING_STYLE environment variable)

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print the allocated size of each file, in blocks

       -S     sort by file size, largest first

       --sort=WORD
              sort  by WORD instead of name: none (-U), size (-S), time (-t),
              version (-v), extension (-X)

       --time=WORD
              with -l, show time as  WORD  instead  of  default  modification
              time:  atime  or access or use (-u); ctime or status (-c); also
              use specified time as sort key if --sort=time (newest first)

       --time-style=TIME_STYLE
              time/date format with -l; see TIME_STYLE below

       -t     sort by modification time, newest first

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with -lt: sort by, and show, access time; with -l: show  access
              time  and  sort by name; otherwise: sort by access time, newest
              first

       -U     do not sort; list entries in directory order

       -v     natural sort of (version) numbers within text

       -w, --width=COLS
              set output width to COLS.  0 means no limit

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -Z, --context
              print any security context of each file

       -1     list one file per line.  Avoid '\n' with -q or -b

       --help display this help and exit

       --version
              output version information and exit

       The SIZE argument is an integer and optional  unit  (example:  10K  is
       10*1024).   Units  are  K,M,G,T,P,E,Z,Y  (powers of 1024) or KB,MB,...
       (powers of 1000).

       The TIME_STYLE argument can be full-iso,  long-iso,  iso,  locale,  or
       +FORMAT.   FORMAT  is  interpreted like in date(1).  If FORMAT is FOR‐
       MAT1<newline>FORMAT2, then FORMAT1 applies  to  non-recent  files  and
       FORMAT2  to recent files.  TIME_STYLE prefixed with 'posix-' takes ef‐
       fect only outside the POSIX locale.  Also the  TIME_STYLE  environment
       variable sets the default style to use.

       Using  color to distinguish file types is disabled both by default and
       with --color=never.  With --color=auto, ls emits color codes only when
       standard output is connected to a terminal.  The LS_COLORS environment
       variable can change the settings.  Use the dircolors  command  to  set
       it.

   Exit status:
       0      if OK,

       1      if minor problems (e.g., cannot access subdirectory),

       2      if serious trouble (e.g., cannot access command-line argument).

AUTHOR
       Written by Richard M. Stallman and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report ls translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2018 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: <https://www.gnu.org/software/coreutils/ls>
       or available locally via: info '(coreutils) ls invocation'

GNU coreutils 8.30              September 2019                          LS(1)
VIM(1)                     General Commands Manual                     VIM(1)

NAME
       vim - Vi IMproved, a programmer's text editor

SYNOPSIS
       vim [options] [file ..]
       vim [options] -
       vim [options] -t tag
       vim [options] -q [errorfile]

       ex
       view
       gvim gview evim eview
       rvim rview rgvim rgview

DESCRIPTION
       Vim is a text editor that is upwards compatible to Vi.  It can be used
       to edit all kinds of plain text.  It is especially useful for  editing
       programs.

       There are a lot of enhancements above Vi: multi level undo, multi win‐
       dows and buffers, syntax highlighting, command line editing,  filename
       completion,   on-line   help,  visual  selection,  etc..   See  ":help
       vi_diff.txt" for a summary of the differences between Vim and Vi.

       While running Vim a lot of help can be obtained from the on-line  help
       system, with the ":help" command.  See the ON-LINE HELP section below.

       Most often Vim is started to edit a single file with the command

            vim file

       More generally Vim is started with:

            vim [options] [filelist]

       If  the  filelist is missing, the editor will start with an empty buf‐
       fer.  Otherwise exactly one out of the following four may be  used  to
       choose one or more files to be edited.

       file ..     A  list  of  filenames.  The first one will be the current
                   file and read into the buffer.  The cursor will  be  posi‐
                   tioned  on  the  first line of the buffer.  You can get to
                   the other files with the ":next" command.  To edit a  file
                   that starts with a dash, precede the filelist with "--".

       -           The  file  to  edit is read from stdin.  Commands are read
                   from stderr, which should be a tty.

       -t {tag}    The file to edit and the initial cursor  position  depends
                   on  a  "tag", a sort of goto label.  {tag} is looked up in
                   the tags file, the associated  file  becomes  the  current
                   file  and the associated command is executed.  Mostly this
                   is used for C programs, in which case  {tag}  could  be  a
                   function  name.   The  effect  is that the file containing
                   that function becomes the current file and the  cursor  is
                   positioned  on  the  start  of  the  function.  See ":help
                   tag-commands".

       -q [errorfile]
                   Start in quickFix mode.  The file [errorfile] is read  and
                   the  first error is displayed.  If [errorfile] is omitted,
                   the filename is obtained from the 'errorfile' option  (de‐
                   faults  to  "AztecC.Err"  for  the  Amiga, "errors.err" on
                   other systems).  Further errors can be jumped to with  the
                   ":cn" command.  See ":help quickfix".

       Vim behaves differently, depending on the name of the command (the ex‐
       ecutable may still be the same file).

       vim       The "normal" way, everything is default.

       ex        Start in Ex mode.  Go to Normal mode with the ":vi" command.
                 Can also be done with the "-e" argument.

       view      Start in read-only mode.  You will be protected from writing
                 the files.  Can also be done with the "-R" argument.

       gvim gview
                 The GUI version.  Starts a new window.   Can  also  be  done
                 with the "-g" argument.

       evim eview
                 The  GUI  version  in  easy mode.  Starts a new window.  Can
                 also be done with the "-y" argument.

       rvim rview rgvim rgview
                 Like the above, but with restrictions.  It will not be  pos‐
                 sible  to start shell commands, or suspend Vim.  Can also be
                 done with the "-Z" argument.

OPTIONS
       The options may be given in any order, before or after filenames.  Op‐
       tions without an argument can be combined after a single dash.

       +[num]      For  the  first file the cursor will be positioned on line
                   "num".  If "num" is missing, the cursor will be positioned
                   on the last line.

       +/{pat}     For  the  first  file the cursor will be positioned in the
                   line with the  first  occurrence  of  {pat}.   See  ":help
                   search-pattern" for the available search patterns.

       +{command}

       -c {command}
                   {command}  will  be executed after the first file has been
                   read.  {command} is interpreted as an Ex command.  If  the
                   {command}  contains  spaces  it must be enclosed in double
                   quotes (this depends on the shell that is used).  Example:
                   Vim "+set si" main.c
                   Note: You can use up to 10 "+" or "-c" commands.

       -S {file}   {file} will be sourced after the first file has been read.
                   This is equivalent to -c "source {file}".   {file}  cannot
                   start  with  '-'.   If  {file} is omitted "Session.vim" is
                   used (only works when -S is the last argument).

       --cmd {command}
                   Like using "-c", but the command is executed  just  before
                   processing  any vimrc file.  You can use up to 10 of these
                   commands, independently from "-c" commands.

       -A          If Vim has been compiled with ARABIC support  for  editing
                   right-to-left  oriented files and Arabic keyboard mapping,
                   this option starts Vim in Arabic mode,  i.e.  'arabic'  is
                   set.  Otherwise an error message is given and Vim aborts.

       -b          Binary mode.  A few options will be set that makes it pos‐
                   sible to edit a binary or executable file.

       -C          Compatible.  Set the 'compatible' option.  This will  make
                   Vim  behave  mostly like Vi, even though a .vimrc file ex‐
                   ists.

       -d          Start in diff mode.  There should be two,  three  or  four
                   file name arguments.  Vim will open all the files and show
                   differences between them.  Works like vimdiff(1).

       -d {device} Open {device} for use as a terminal.  Only on  the  Amiga.
                   Example: "-d con:20/30/600/150".

       -D          Debugging.   Go to debugging mode when executing the first
                   command from a script.

       -e          Start Vim in Ex mode, just like the executable was  called
                   "ex".

       -E          Start  Vim  in  improved Ex mode, just like the executable
                   was called "exim".

       -f          Foreground.  For the GUI version, Vim will  not  fork  and
                   detach  from  the  shell it was started in.  On the Amiga,
                   Vim is not restarted to open a new  window.   This  option
                   should be used when Vim is executed by a program that will
                   wait for the edit session to finish (e.g. mail).   On  the
                   Amiga the ":sh" and ":!" commands will not work.

       --nofork    Foreground.   For  the  GUI version, Vim will not fork and
                   detach from the shell it was started in.

       -F          If Vim has been compiled with FKMAP  support  for  editing
                   right-to-left  oriented  files and Farsi keyboard mapping,
                   this option starts Vim in Farsi  mode,  i.e.  'fkmap'  and
                   'rightleft'  are set.  Otherwise an error message is given
                   and Vim aborts.

       -g          If Vim has been compiled with GUI support, this option en‐
                   ables  the GUI.  If no GUI support was compiled in, an er‐
                   ror message is given and Vim aborts.

       -h          Give a bit of help about the command  line  arguments  and
                   options.  After this Vim exits.

       -H          If  Vim has been compiled with RIGHTLEFT support for edit‐
                   ing right-to-left oriented files and Hebrew keyboard  map‐
                   ping,  this option starts Vim in Hebrew mode, i.e. 'hkmap'
                   and 'rightleft' are set.  Otherwise an  error  message  is
                   given and Vim aborts.

       -i {viminfo}
                   Specifies  the filename to use when reading or writing the
                   viminfo file, instead of the default  "~/.viminfo".   This
                   can  also be used to skip the use of the .viminfo file, by
                   giving the name "NONE".

       -L          Same as -r.

       -l          Lisp mode.  Sets the 'lisp' and 'showmatch' options on.

       -m          Modifying files is disabled.  Resets the  'write'  option.
                   You can still modify the buffer, but writing a file is not
                   possible.

       -M          Modifications not allowed.  The 'modifiable'  and  'write'
                   options will be unset, so that changes are not allowed and
                   files can not be written.  Note that these options can  be
                   set to enable making modifications.

       -N          No-compatible mode.  Resets the 'compatible' option.  This
                   will make Vim behave a bit better, but less Vi compatible,
                   even though a .vimrc file does not exist.

       -n          No swap file will be used.  Recovery after a crash will be
                   impossible.  Handy if you want to edit a file  on  a  very
                   slow  medium  (e.g.  floppy).  Can also be done with ":set
                   uc=0".  Can be undone with ":set uc=200".

       -nb         Become an editor server for NetBeans.  See  the  docs  for
                   details.

       -o[N]       Open  N windows stacked.  When N is omitted, open one win‐
                   dow for each file.

       -O[N]       Open N windows side by side.  When N is omitted, open  one
                   window for each file.

       -p[N]       Open  N  tab  pages.  When N is omitted, open one tab page
                   for each file.

       -R          Read-only mode.  The 'readonly' option will be  set.   You
                   can  still edit the buffer, but will be prevented from ac‐
                   cidentally overwriting a file.  If you do  want  to  over‐
                   write  a  file, add an exclamation mark to the Ex command,
                   as in ":w!".  The -R option also  implies  the  -n  option
                   (see  above).   The  'readonly'  option  can be reset with
                   ":set noro".  See ":help 'readonly'".

       -r          List swap files, with information about using them for re‐
                   covery.

       -r {file}   Recovery mode.  The swap file is used to recover a crashed
                   editing session.  The swap file is a file  with  the  same
                   filename  as  the  text  file  with  ".swp" appended.  See
                   ":help recovery".

       -s          Silent mode.  Only when started as "Ex" or when  the  "-e"
                   option was given before the "-s" option.

       -s {scriptin}
                   The script file {scriptin} is read.  The characters in the
                   file are interpreted as if you had typed them.   The  same
                   can  be  done  with the command ":source! {scriptin}".  If
                   the end of the file is reached before  the  editor  exits,
                   further characters are read from the keyboard.

       -T {terminal}
                   Tells  Vim  the  name of the terminal you are using.  Only
                   required when the automatic way doesn't work.  Should be a
                   terminal  known to Vim (builtin) or defined in the termcap
                   or terminfo file.

       -u {vimrc}  Use the commands in the file {vimrc} for  initializations.
                   All  the  other  initializations are skipped.  Use this to
                   edit a special kind of files.  It can also be used to skip
                   all initializations by giving the name "NONE".  See ":help
                   initialization" within vim for more details.

       -U {gvimrc} Use the commands in the file {gvimrc} for GUI  initializa‐
                   tions.  All the other GUI initializations are skipped.  It
                   can also be used to skip all GUI initializations by giving
                   the name "NONE".  See ":help gui-init" within vim for more
                   details.

       -V[N]       Verbose.  Give messages about which files are sourced  and
                   for reading and writing a viminfo file.  The optional num‐
                   ber N is the value for 'verbose'.  Default is 10.

       -v          Start Vim in Vi mode, just like the executable was  called
                   "vi".   This only has effect when the executable is called
                   "ex".

       -w {scriptout}
                   All the characters that you type are recorded in the  file
                   {scriptout},  until  you  exit Vim.  This is useful if you
                   want to create a script file to be used with "vim  -s"  or
                   ":source!".   If  the  {scriptout} file exists, characters
                   are appended.

       -W {scriptout}
                   Like -w, but an existing file is overwritten.

       -x          Use encryption when writing  files.   Will  prompt  for  a
                   crypt key.

       -X          Don't connect to the X server.  Shortens startup time in a
                   terminal, but the window title and clipboard will  not  be
                   used.

       -y          Start  Vim  in  easy  mode,  just  like the executable was
                   called "evim" or "eview".  Makes Vim behave like a  click-
                   and-type editor.

       -Z          Restricted  mode.   Works  like the executable starts with
                   "r".

       --          Denotes the end of the options.  Arguments after this will
                   be  handled  as  a  file name.  This can be used to edit a
                   filename that starts with a '-'.

       --echo-wid  GTK GUI only: Echo the Window ID on stdout.

       --help      Give a help message and exit, just like "-h".

       --literal   Take file name arguments literally, do  not  expand  wild‐
                   cards.  This has no effect on Unix where the shell expands
                   wildcards.

       --noplugin  Skip loading plugins.  Implied by -u NONE.

       --remote    Connect to a Vim server and make it edit the  files  given
                   in  the  rest  of  the arguments.  If no server is found a
                   warning is given and the files are edited in  the  current
                   Vim.

       --remote-expr {expr}
                   Connect  to  a Vim server, evaluate {expr} in it and print
                   the result on stdout.

       --remote-send {keys}
                   Connect to a Vim server and send {keys} to it.

       --remote-silent
                   As --remote, but without the warning  when  no  server  is
                   found.

       --remote-wait
                   As  --remote,  but  Vim does not exit until the files have
                   been edited.

       --remote-wait-silent
                   As --remote-wait, but without the warning when  no  server
                   is found.

       --serverlist
                   List the names of all Vim servers that can be found.

       --servername {name}
                   Use  {name} as the server name.  Used for the current Vim,
                   unless used with a --remote argument, then it's  the  name
                   of the server to connect to.

       --socketid {id}
                   GTK GUI only: Use the GtkPlug mechanism to run gvim in an‐
                   other window.

       --version   Print version information and exit.

ON-LINE HELP
       Type ":help" in Vim to get started.  Type ":help subject" to get  help
       on  a  specific  subject.  For example: ":help ZZ" to get help for the
       "ZZ" command.  Use <Tab> and CTRL-D to complete subjects (":help  cmd‐
       line-completion").  Tags are present to jump from one place to another
       (sort of hypertext links, see ":help").  All documentation  files  can
       be viewed in this way, for example ":help syntax.txt".

FILES
       /usr/share/vim/vim81/doc/*.txt
                      The Vim documentation files.  Use ":help doc-file-list"
                      to get the complete list.

       /usr/share/vim/vim81/doc/tags
                      The tags file used for finding information in the docu‐
                      mentation files.

       /usr/share/vim/vim81/syntax/syntax.vim
                      System wide syntax initializations.

       /usr/share/vim/vim81/syntax/*.vim
                      Syntax files for various languages.

       /usr/share/vim/vimrc
                      System wide Vim initializations.

       ~/.vimrc       Your personal Vim initializations.

       /usr/share/vim/gvimrc
                      System wide gvim initializations.

       ~/.gvimrc      Your personal gvim initializations.

       /usr/share/vim/vim81/optwin.vim
                      Script  used  for the ":options" command, a nice way to
                      view and set options.

       /usr/share/vim/vim81/menu.vim
                      System wide menu initializations for gvim.

       /usr/share/vim/vim81/bugreport.vim
                      Script to generate a bug report.  See ":help bugs".

       /usr/share/vim/vim81/filetype.vim
                      Script to detect the type of a file by its  name.   See
                      ":help 'filetype'".

       /usr/share/vim/vim81/scripts.vim
                      Script  to  detect  the type of a file by its contents.
                      See ":help 'filetype'".

       /usr/share/vim/vim81/print/*.ps
                      Files used for PostScript printing.

       For recent info read the VIM home page:
       <URL:http://www.vim.org/>

SEE ALSO
       vimtutor(1)

AUTHOR
       Most of Vim was made by Bram Moolenaar, with a lot of help  from  oth‐
       ers.  See ":help credits" in Vim.
       Vim  is  based on Stevie, worked on by: Tim Thompson, Tony Andrews and
       G.R. (Fred) Walter.  Although hardly any of the original code remains.

BUGS
       Probably.  See ":help todo" for a list of known problems.

       Note that a number of things that may be regarded as bugs by some, are
       in  fact caused by a too-faithful reproduction of Vi's behaviour.  And
       if you think other things are bugs "because Vi does  it  differently",
       you  should  take a closer look at the vi_diff.txt file (or type :help
       vi_diff.txt when in Vim).  Also have a look at  the  'compatible'  and
       'cpoptions' options.

                                 2006 Apr 11                           VIM(1)
CHMOD(1)                        User Commands                        CHMOD(1)

NAME
       chmod - change file mode bits

SYNOPSIS
       chmod [OPTION]... MODE[,MODE]... FILE...
       chmod [OPTION]... OCTAL-MODE FILE...
       chmod [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       This  manual  page  documents the GNU version of chmod.  chmod changes
       the file mode bits of each given file according to mode, which can  be
       either  a symbolic representation of changes to make, or an octal num‐
       ber representing the bit pattern for the new mode bits.

       The format of a symbolic mode is [ugoa...][[-+=][perms...]...],  where
       perms  is either zero or more letters from the set rwxXst, or a single
       letter from the set ugo.  Multiple symbolic modes can be given,  sepa‐
       rated by commas.

       A  combination of the letters ugoa controls which users' access to the
       file will be changed: the user who owns it (u),  other  users  in  the
       file's  group  (g),  other  users  not in the file's group (o), or all
       users (a).  If none of these are given, the effect is as if  (a)  were
       given, but bits that are set in the umask are not affected.

       The  operator  + causes the selected file mode bits to be added to the
       existing file mode bits of each file; - causes them to be removed; and
       =  causes  them  to be added and causes unmentioned bits to be removed
       except that a directory's unmentioned set user and group ID  bits  are
       not affected.

       The  letters rwxXst select file mode bits for the affected users: read
       (r),  write  (w),  execute  (or  search  for  directories)  (x),  exe‐
       cute/search  only  if  the  file is a directory or already has execute
       permission for some user (X), set user or group ID on  execution  (s),
       restricted deletion flag or sticky bit (t).  Instead of one or more of
       these letters, you can specify exactly one of  the  letters  ugo:  the
       permissions granted to the user who owns the file (u), the permissions
       granted to other users who are members of the file's  group  (g),  and
       the  permissions  granted to users that are in neither of the two pre‐
       ceding categories (o).

       A numeric mode is from one to four  octal  digits  (0-7),  derived  by
       adding  up  the  bits with values 4, 2, and 1.  Omitted digits are as‐
       sumed to be leading zeros.  The first digit selects the  set  user  ID
       (4)  and  set  group  ID (2) and restricted deletion or sticky (1) at‐
       tributes.  The second digit selects permissions for the user who  owns
       the file: read (4), write (2), and execute (1); the third selects per‐
       missions for other users in the file's group, with  the  same  values;
       and  the fourth for other users not in the file's group, with the same
       values.

       chmod never changes the permissions of symbolic links; the chmod  sys‐
       tem call cannot change their permissions.  This is not a problem since
       the permissions of symbolic links are never used.  However,  for  each
       symbolic  link  listed  on the command line, chmod changes the permis‐
       sions of the pointed-to file.  In  contrast,  chmod  ignores  symbolic
       links encountered during recursive directory traversals.

SETUID AND SETGID BITS
       chmod  clears  the  set-group-ID  bit  of a regular file if the file's
       group ID does not match the user's effective group ID or  one  of  the
       user's supplementary group IDs, unless the user has appropriate privi‐
       leges.  Additional restrictions may cause  the  set-user-ID  and  set-
       group-ID  bits  of MODE or RFILE to be ignored.  This behavior depends
       on the policy and functionality of the underlying chmod  system  call.
       When in doubt, check the underlying system behavior.

       For  directories chmod preserves set-user-ID and set-group-ID bits un‐
       less you explicitly specify otherwise.  You can set or clear the  bits
       with  symbolic modes like u+s and g-s.  To clear these bits for direc‐
       tories with a numeric mode requires an  additional  leading  zero,  or
       leading = like 00755 , or =755

RESTRICTED DELETION FLAG OR STICKY BIT
       The  restricted deletion flag or sticky bit is a single bit, whose in‐
       terpretation depends on the file type.  For directories,  it  prevents
       unprivileged  users  from removing or renaming a file in the directory
       unless they own the file or the directory;  this  is  called  the  re‐
       stricted  deletion  flag  for  the directory, and is commonly found on
       world-writable directories like /tmp.  For regular files on some older
       systems,  the bit saves the program's text image on the swap device so
       it will load more quickly when run; this is called the sticky bit.

OPTIONS
       Change the mode of each FILE to MODE.  With  --reference,  change  the
       mode of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's mode instead of MODE values

       -R, --recursive
              change files and directories recursively

       --help display this help and exit

       --version
              output version information and exit

       Each           MODE          is          of          the          form
       '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report   chmod   translation    bugs    to    <https://translationpro‐
       ject.org/team/>

COPYRIGHT
       Copyright  ©  2018 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       chmod(2)

       Full documentation at: <https://www.gnu.org/software/coreutils/chmod>
       or available locally via: info '(coreutils) chmod invocation'

GNU coreutils 8.30              September 2019                       CHMOD(1)
GROUPS(1)                       User Commands                       GROUPS(1)

NAME
       groups - print the groups a user is in

SYNOPSIS
       groups [OPTION]... [USERNAME]...

DESCRIPTION
       Print group memberships for each USERNAME or, if no USERNAME is speci‐
       fied, for the current process (which may differ if the groups database
       has changed).

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by David MacKenzie and James Youngman.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report    groups    translation   bugs   to   <https://translationpro‐
       ject.org/team/>

COPYRIGHT
       Copyright © 2018 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       getent(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/groups>
       or available locally via: info '(coreutils) groups invocation'

GNU coreutils 8.30              September 2019                      GROUPS(1)
FILE(1)                  BSD General Commands Manual                  FILE(1)

NAME
     file — determine file type

SYNOPSIS
     file [-bcdEhiklLNnprsSvzZ0] [--apple] [--extension] [--mime-encoding]
          [--mime-type] [-e testname] [-F separator] [-f namefile]
          [-m magicfiles] [-P name=value] file ...
     file -C [-m magicfiles]
     file [--help]

DESCRIPTION
     This manual page documents version 5.38 of the file command.

     file tests each argument in an attempt to classify it.  There are three
     sets of tests, performed in this order: filesystem tests, magic tests,
     and language tests.  The first test that succeeds causes the file type
     to be printed.

     The type printed will usually contain one of the words text (the file
     contains only printing characters and a few common control characters
     and is probably safe to read on an ASCII terminal), executable (the file
     contains the result of compiling a program in a form understandable to
     some UNIX kernel or another), or data meaning anything else (data is
     usually “binary” or non-printable).  Exceptions are well-known file for‐
     mats (core files, tar archives) that are known to contain binary data.
     When adding local definitions to /etc/magic, make sure to preserve these
     keywords.  Users depend on knowing that all the readable files in a di‐
     rectory have the word “text” printed.  Don't do as Berkeley did and
     change “shell commands text” to “shell script”.

     The filesystem tests are based on examining the return from a stat(2)
     system call.  The program checks to see if the file is empty, or if it's
     some sort of special file.  Any known file types appropriate to the sys‐
     tem you are running on (sockets, symbolic links, or named pipes (FIFOs)
     on those systems that implement them) are intuited if they are defined
     in the system header file <sys/stat.h>.

     The magic tests are used to check for files with data in particular
     fixed formats.  The canonical example of this is a binary executable
     (compiled program) a.out file, whose format is defined in <elf.h>,
     <a.out.h> and possibly <exec.h> in the standard include directory.
     These files have a “magic number” stored in a particular place near the
     beginning of the file that tells the UNIX operating system that the file
     is a binary executable, and which of several types thereof.  The concept
     of a “magic” has been applied by extension to data files.  Any file with
     some invariant identifier at a small fixed offset into the file can usu‐
     ally be described in this way.  The information identifying these files
     is read from /etc/magic and the compiled magic file
     /usr/share/misc/magic.mgc, or the files in the directory
     /usr/share/misc/magic if the compiled file does not exist.  In addition,
     if $HOME/.magic.mgc or $HOME/.magic exists, it will be used in prefer‐
     ence to the system magic files.

     If a file does not match any of the entries in the magic file, it is ex‐
     amined to see if it seems to be a text file.  ASCII, ISO-8859-x, non-ISO
     8-bit extended-ASCII character sets (such as those used on Macintosh and
     IBM PC systems), UTF-8-encoded Unicode, UTF-16-encoded Unicode, and
     EBCDIC character sets can be distinguished by the different ranges and
     sequences of bytes that constitute printable text in each set.  If a
     file passes any of these tests, its character set is reported.  ASCII,
     ISO-8859-x, UTF-8, and extended-ASCII files are identified as “text” be‐
     cause they will be mostly readable on nearly any terminal; UTF-16 and
     EBCDIC are only “character data” because, while they contain text, it is
     text that will require translation before it can be read.  In addition,
     file will attempt to determine other characteristics of text-type files.
     If the lines of a file are terminated by CR, CRLF, or NEL, instead of
     the Unix-standard LF, this will be reported.  Files that contain embed‐
     ded escape sequences or overstriking will also be identified.

     Once file has determined the character set used in a text-type file, it
     will attempt to determine in what language the file is written.  The
     language tests look for particular strings (cf.  <names.h>) that can ap‐
     pear anywhere in the first few blocks of a file.  For example, the key‐
     word .br indicates that the file is most likely a troff(1) input file,
     just as the keyword struct indicates a C program.  These tests are less
     reliable than the previous two groups, so they are performed last.  The
     language test routines also test for some miscellany (such as tar(1) ar‐
     chives, JSON files).

     Any file that cannot be identified as having been written in any of the
     character sets listed above is simply said to be “data”.

OPTIONS
     --apple
             Causes the file command to output the file type and creator code
             as used by older MacOS versions.  The code consists of eight
             letters, the first describing the file type, the latter the cre‐
             ator.  This option works properly only for file formats that
             have the apple-style output defined.

     -b, --brief
             Do not prepend filenames to output lines (brief mode).

     -C, --compile
             Write a magic.mgc output file that contains a pre-parsed version
             of the magic file or directory.

     -c, --checking-printout
             Cause a checking printout of the parsed form of the magic file.
             This is usually used in conjunction with the -m flag to debug a
             new magic file before installing it.

     -d      Prints internal debugging information to stderr.

     -E      On filesystem errors (file not found etc), instead of handling
             the error as regular output as POSIX mandates and keep going,
             issue an error message and exit.

     -e, --exclude testname
             Exclude the test named in testname from the list of tests made
             to determine the file type.  Valid test names are:

             apptype   EMX application type (only on EMX).

             ascii     Various types of text files (this test will try to
                       guess the text encoding, irrespective of the setting
                       of the ‘encoding’ option).

             encoding  Different text encodings for soft magic tests.

             tokens    Ignored for backwards compatibility.

             cdf       Prints details of Compound Document Files.

             compress  Checks for, and looks inside, compressed files.

             csv       Checks Comma Separated Value files.

             elf       Prints ELF file details, provided soft magic tests are
                       enabled and the elf magic is found.

             json      Examines JSON (RFC-7159) files by parsing them for
                       compliance.

             soft      Consults magic files.

             tar       Examines tar files by verifying the checksum of the
                       512 byte tar header.  Excluding this test can provide
                       more detailed content description by using the soft
                       magic method.

             text      A synonym for ‘ascii’.

     --extension
             Print a slash-separated list of valid extensions for the file
             type found.

     -F, --separator separator
             Use the specified string as the separator between the filename
             and the file result returned.  Defaults to ‘:’.

     -f, --files-from namefile
             Read the names of the files to be examined from namefile (one
             per line) before the argument list.  Either namefile or at least
             one filename argument must be present; to test the standard in‐
             put, use ‘-’ as a filename argument.  Please note that namefile
             is unwrapped and the enclosed filenames are processed when this
             option is encountered and before any further options processing
             is done.  This allows one to process multiple lists of files
             with different command line arguments on the same file invoca‐
             tion.  Thus if you want to set the delimiter, you need to do it
             before you specify the list of files, like: “-F @ -f namefile”,
             instead of: “-f namefile -F @”.

     -h, --no-dereference
             option causes symlinks not to be followed (on systems that sup‐
             port symbolic links).  This is the default if the environment
             variable POSIXLY_CORRECT is not defined.

     -i, --mime
             Causes the file command to output mime type strings rather than
             the more traditional human readable ones.  Thus it may say
             ‘text/plain; charset=us-ascii’ rather than “ASCII text”.

     --mime-type, --mime-encoding
             Like -i, but print only the specified element(s).

     -k, --keep-going
             Don't stop at the first match, keep going.  Subsequent matches
             will be have the string ‘\012- ’ prepended.  (If you want a new‐
             line, see the -r option.)  The magic pattern with the highest
             strength (see the -l option) comes first.

     -l, --list
             Shows a list of patterns and their strength sorted descending by
             magic(5) strength which is used for the matching (see also the
             -k option).

     -L, --dereference
             option causes symlinks to be followed, as the like-named option
             in ls(1) (on systems that support symbolic links).  This is the
             default if the environment variable POSIXLY_CORRECT is defined.

     -m, --magic-file magicfiles
             Specify an alternate list of files and directories containing
             magic.  This can be a single item, or a colon-separated list.
             If a compiled magic file is found alongside a file or directory,
             it will be used instead.

     -N, --no-pad
             Don't pad filenames so that they align in the output.

     -n, --no-buffer
             Force stdout to be flushed after checking each file.  This is
             only useful if checking a list of files.  It is intended to be
             used by programs that want filetype output from a pipe.

     -p, --preserve-date
             On systems that support utime(3) or utimes(2), attempt to pre‐
             serve the access time of files analyzed, to pretend that file
             never read them.

     -P, --parameter name=value
             Set various parameter limits.

                   Name         Default    Explanation
                   indir        15         recursion limit for indirect magic
                   name         30         use count limit for name/use magic
                   elf_notes    256        max ELF notes processed
                   elf_phnum    128        max ELF program sections processed
                   elf_shnum    32768      max ELF sections processed
                   regex        8192       length limit for regex searches
                   bytes        1048576    max number of bytes to read from
                                                                          file

     -r, --raw
             Don't translate unprintable characters to \ooo.  Normally file
             translates unprintable characters to their octal representation.

     -s, --special-files
             Normally, file only attempts to read and determine the type of
             argument files which stat(2) reports are ordinary files.  This
             prevents problems, because reading special files may have pecu‐
             liar consequences.  Specifying the -s option causes file to also
             read argument files which are block or character special files.
             This is useful for determining the filesystem types of the data
             in raw disk partitions, which are block special files.  This op‐
             tion also causes file to disregard the file size as reported by
             stat(2) since on some systems it reports a zero size for raw
             disk partitions.

     -S, --no-sandbox
             On systems where libseccomp
             (https://github.com/seccomp/libseccomp) is available, the -S
             flag disables sandboxing which is enabled by default.  This op‐
             tion is needed for file to execute external decompressing pro‐
             grams, i.e. when the -z flag is specified and the built-in de‐
             compressors are not available.  On systems where sandboxing is
             not available, this option has no effect.

             Note: This Debian version of file was built without seccomp sup‐
             port, so this option has no effect.

     -v, --version
             Print the version of the program and exit.

     -z, --uncompress
             Try to look inside compressed files.

     -Z, --uncompress-noreport
             Try to look inside compressed files, but report information
             about the contents only not the compression.

     -0, --print0
             Output a null character ‘\0’ after the end of the filename.
             Nice to cut(1) the output.  This does not affect the separator,
             which is still printed.

             If this option is repeated more than once, then file prints just
             the filename followed by a NUL followed by the description (or
             ERROR: text) followed by a second NUL for each entry.

     --help  Print a help message and exit.

ENVIRONMENT
     The environment variable MAGIC can be used to set the default magic file
     name.  If that variable is set, then file will not attempt to open
     $HOME/.magic.  file adds “.mgc” to the value of this variable as appro‐
     priate.  The environment variable POSIXLY_CORRECT controls (on systems
     that support symbolic links), whether file will attempt to follow sym‐
     links or not.  If set, then file follows symlink, otherwise it does not.
     This is also controlled by the -L and -h options.

FILES
     /usr/share/misc/magic.mgc  Default compiled list of magic.
     /usr/share/misc/magic      Directory containing default magic files.

EXIT STATUS
     file will exit with 0 if the operation was successful or >0 if an error
     was encountered.  The following errors cause diagnostic messages, but
     don't affect the program exit code (as POSIX requires), unless -E is
     specified:
           •   A file cannot be found
           •   There is no permission to read a file
           •   The file type cannot be determined

EXAMPLES
           $ file file.c file /dev/{wd0a,hda}
           file.c:   C program text
           file:     ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV),
                     dynamically linked (uses shared libs), stripped
           /dev/wd0a: block special (0/0)
           /dev/hda: block special (3/0)

           $ file -s /dev/wd0{b,d}
           /dev/wd0b: data
           /dev/wd0d: x86 boot sector

           $ file -s /dev/hda{,1,2,3,4,5,6,7,8,9,10}
           /dev/hda:   x86 boot sector
           /dev/hda1:  Linux/i386 ext2 filesystem
           /dev/hda2:  x86 boot sector
           /dev/hda3:  x86 boot sector, extended partition table
           /dev/hda4:  Linux/i386 ext2 filesystem
           /dev/hda5:  Linux/i386 swap file
           /dev/hda6:  Linux/i386 swap file
           /dev/hda7:  Linux/i386 swap file
           /dev/hda8:  Linux/i386 swap file
           /dev/hda9:  empty
           /dev/hda10: empty

           $ file -i file.c file /dev/{wd0a,hda}
           file.c:      text/x-c
           file:        application/x-executable
           /dev/hda:    application/x-not-regular-file
           /dev/wd0a:   application/x-not-regular-file

SEE ALSO
     hexdump(1), od(1), strings(1), magic(5)

STANDARDS CONFORMANCE
     This program is believed to exceed the System V Interface Definition of
     FILE(CMD), as near as one can determine from the vague language con‐
     tained therein.  Its behavior is mostly compatible with the System V
     program of the same name.  This version knows more magic, however, so it
     will produce different (albeit more accurate) output in many cases.

     The one significant difference between this version and System V is that
     this version treats any white space as a delimiter, so that spaces in
     pattern strings must be escaped.  For example,

           >10     string  language impress        (imPRESS data)

     in an existing magic file would have to be changed to

           >10     string  language\ impress       (imPRESS data)

     In addition, in this version, if a pattern string contains a backslash,
     it must be escaped.  For example

           0       string          \begindata      Andrew Toolkit document

     in an existing magic file would have to be changed to

           0       string          \\begindata     Andrew Toolkit document

     SunOS releases 3.2 and later from Sun Microsystems include a file com‐
     mand derived from the System V one, but with some extensions.  This ver‐
     sion differs from Sun's only in minor ways.  It includes the extension
     of the ‘&’ operator, used as, for example,

           >16     long&0x7fffffff >0              not stripped

SECURITY
     On systems where libseccomp (https://github.com/seccomp/libseccomp) is
     available, file is enforces limiting system calls to only the ones nec‐
     essary for the operation of the program.  This enforcement does not pro‐
     vide any security benefit when file is asked to decompress input files
     running external programs with the -z option.  To enable execution of
     external decompressors, one needs to disable sandboxing using the -S
     flag.

MAGIC DIRECTORY
     The magic file entries have been collected from various sources, mainly
     USENET, and contributed by various authors.  Christos Zoulas (address
     below) will collect additional or corrected magic file entries.  A con‐
     solidation of magic file entries will be distributed periodically.

     The order of entries in the magic file is significant.  Depending on
     what system you are using, the order that they are put together may be
     incorrect.

HISTORY
     There has been a file command in every UNIX since at least Research
     Version 4 (man page dated November, 1973).  The System V version intro‐
     duced one significant major change: the external list of magic types.
     This slowed the program down slightly but made it a lot more flexible.

     This program, based on the System V version, was written by Ian Darwin
     ⟨ian@darwinsys.com⟩ without looking at anybody else's source code.

     John Gilmore revised the code extensively, making it better than the
     first version.  Geoff Collyer found several inadequacies and provided
     some magic file entries.  Contributions of the ‘&’ operator by Rob McMa‐
     hon, ⟨cudcv@warwick.ac.uk⟩, 1989.

     Guy Harris, ⟨guy@netapp.com⟩, made many changes from 1993 to the
     present.

     Primary development and maintenance from 1990 to the present by Christos
     Zoulas ⟨christos@astron.com⟩.

     Altered by Chris Lowth ⟨chris@lowth.com⟩, 2000: handle the -i option to
     output mime type strings, using an alternative magic file and internal
     logic.

     Altered by Eric Fischer ⟨enf@pobox.com⟩, July, 2000, to identify charac‐
     ter codes and attempt to identify the languages of non-ASCII files.

     Altered by Reuben Thomas ⟨rrt@sc3d.org⟩, 2007-2011, to improve MIME sup‐
     port, merge MIME and non-MIME magic, support directories as well as
     files of magic, apply many bug fixes, update and fix a lot of magic, im‐
     prove the build system, improve the documentation, and rewrite the
     Python bindings in pure Python.

     The list of contributors to the ‘magic’ directory (magic files) is too
     long to include here.  You know who you are; thank you.  Many contribu‐
     tors are listed in the source files.

LEGAL NOTICE
     Copyright (c) Ian F. Darwin, Toronto, Canada, 1986-1999.  Covered by the
     standard Berkeley Software Distribution copyright; see the file COPYING
     in the source distribution.

     The files tar.h and is_tar.c were written by John Gilmore from his pub‐
     lic-domain tar(1) program, and are not covered by the above license.

BUGS
     Please report bugs and send patches to the bug tracker at
     https://bugs.astron.com/ or the mailing list at ⟨file@astron.com⟩ (visit
     https://mailman.astron.com/mailman/listinfo/file first to subscribe).

TODO
     Fix output so that tests for MIME and APPLE flags are not needed all
     over the place, and actual output is only done in one place.  This needs
     a design.  Suggestion: push possible outputs on to a list, then pick the
     last-pushed (most specific, one hopes) value at the end, or use a de‐
     fault if the list is empty.  This should not slow down evaluation.

     The handling of MAGIC_CONTINUE and printing \012- between entries is
     clumsy and complicated; refactor and centralize.

     Some of the encoding logic is hard-coded in encoding.c and can be moved
     to the magic files if we had a !:charset annotation

     Continue to squash all magic bugs.  See Debian BTS for a good source.

     Store arbitrarily long strings, for example for %s patterns, so that
     they can be printed out.  Fixes Debian bug #271672.  This can be done by
     allocating strings in a string pool, storing the string pool at the end
     of the magic file and converting all the string pointers to relative
     offsets from the string pool.

     Add syntax for relative offsets after current level (Debian bug
     #466037).

     Make file -ki work, i.e. give multiple MIME types.

     Add a zip library so we can peek inside Office2007 documents to print
     more details about their contents.

     Add an option to print URLs for the sources of the file descriptions.

     Combine script searches and add a way to map executable names to MIME
     types (e.g. have a magic value for !:mime which causes the resulting
     string to be looked up in a table).  This would avoid adding the same
     magic repeatedly for each new hash-bang interpreter.

     When a file descriptor is available, we can skip and adjust the buffer
     instead of the hacky buffer management we do now.

     Fix “name” and “use” to check for consistency at compile time (duplicate
     “name”, “use” pointing to undefined “name” ).  Make “name” / “use” more
     efficient by keeping a sorted list of names.  Special-case ^ to flip en‐
     dianness in the parser so that it does not have to be escaped, and docu‐
     ment it.

     If the offsets specified internally in the file exceed the buffer size (
     HOWMANY variable in file.h), then we don't seek to that offset, but we
     give up.  It would be better if buffer managements was done when the
     file descriptor is available so move around the file.  One must be care‐
     ful though because this has performance (and thus security considera‐
     tions).

AVAILABILITY
     You can obtain the original author's latest version by anonymous FTP on
     ftp.astron.com in the directory /pub/file/file-X.YZ.tar.gz.

BSD                             July 13, 2019                             BSD
WC(1)                           User Commands                           WC(1)

NAME
       wc - print newline, word, and byte counts for each file

SYNOPSIS
       wc [OPTION]... [FILE]...
       wc [OPTION]... --files0-from=F

DESCRIPTION
       Print  newline,  word, and byte counts for each FILE, and a total line
       if more than one FILE is specified.  A word is a  non-zero-length  se‐
       quence of characters delimited by white space.

       With no FILE, or when FILE is -, read standard input.

       The  options below may be used to select which counts are printed, al‐
       ways in the following order: newline, word, character,  byte,  maximum
       line length.

       -c, --bytes
              print the byte counts

       -m, --chars
              print the character counts

       -l, --lines
              print the newline counts

       --files0-from=F
              read  input from the files specified by NUL-terminated names in
              file F; If F is - then read names from standard input

       -L, --max-line-length
              print the maximum display width

       -w, --words
              print the word counts

       --help display this help and exit

       --version
              output version information and exit

AUTHOR
       Written by Paul Rubin and David MacKenzie.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report wc translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2018 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       Full documentation at: <https://www.gnu.org/software/coreutils/wc>
       or available locally via: info '(coreutils) wc invocation'

GNU coreutils 8.30              September 2019                          WC(1)
RM(1)                           User Commands                           RM(1)

NAME
       rm - remove files or directories

SYNOPSIS
       rm [OPTION]... [FILE]...

DESCRIPTION
       This  manual  page  documents  the GNU version of rm.  rm removes each
       specified file.  By default, it does not remove directories.

       If the -I or --interactive=once option is given, and  there  are  more
       than  three  files  or  the  -r, -R, or --recursive are given, then rm
       prompts the user for whether to proceed with the entire operation.  If
       the response is not affirmative, the entire command is aborted.

       Otherwise,  if a file is unwritable, standard input is a terminal, and
       the -f or --force option is not given, or the -i or  --interactive=al‐
       ways  option  is  given, rm prompts the user for whether to remove the
       file.  If the response is not affirmative, the file is skipped.

OPTIONS
       Remove (unlink) the FILE(s).

       -f, --force
              ignore nonexistent files and arguments, never prompt

       -i     prompt before every removal

       -I     prompt once before removing more than three files, or when  re‐
              moving  recursively; less intrusive than -i, while still giving
              protection against most mistakes

       --interactive[=WHEN]
              prompt according to WHEN: never, once  (-I),  or  always  (-i);
              without WHEN, prompt always

       --one-file-system
              when  removing a hierarchy recursively, skip any directory that
              is on a file system different from that  of  the  corresponding
              command line argument

       --no-preserve-root
              do not treat '/' specially

       --preserve-root[=all]
              do  not  remove  '/'  (default); with 'all', reject any command
              line argument on a separate device from its parent

       -r, -R, --recursive
              remove directories and their contents recursively

       -d, --dir
              remove empty directories

       -v, --verbose
              explain what is being done

       --help display this help and exit

       --version
              output version information and exit

       By default, rm does not remove directories.  Use the  --recursive  (-r
       or  -R) option to remove each listed directory, too, along with all of
       its contents.

       To remove a file whose name starts with a '-', for example '-foo', use
       one of these commands:

              rm -- -foo

              rm ./-foo

       Note  that if you use rm to remove a file, it might be possible to re‐
       cover some of its contents, given sufficient  expertise  and/or  time.
       For  greater assurance that the contents are truly unrecoverable, con‐
       sider using shred.

AUTHOR
       Written by Paul Rubin, David MacKenzie, Richard M. Stallman,  and  Jim
       Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report rm translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2018 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       unlink(1), unlink(2), chattr(1), shred(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/rm>
       or available locally via: info '(coreutils) rm invocation'

GNU coreutils 8.30              September 2019                          RM(1)
TAIL(1)                         User Commands                         TAIL(1)

NAME
       tail - output the last part of files

SYNOPSIS
       tail [OPTION]... [FILE]...

DESCRIPTION
       Print  the  last  10 lines of each FILE to standard output.  With more
       than one FILE, precede each with a header giving the file name.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory  for  short  options
       too.

       -c, --bytes=[+]NUM
              output  the  last  NUM bytes; or use -c +NUM to output starting
              with byte NUM of each file

       -f, --follow[={name|descriptor}]
              output appended data as the file grows;

              an absent option argument means 'descriptor'

       -F     same as --follow=name --retry

       -n, --lines=[+]NUM
              output the last NUM lines, instead of the last 10;  or  use  -n
              +NUM to output starting with line NUM

       --max-unchanged-stats=N
              with --follow=name, reopen a FILE which has not

              changed  size  after  N (default 5) iterations to see if it has
              been unlinked or renamed (this is the usual case of rotated log
              files); with inotify, this option is rarely useful

       --pid=PID
              with -f, terminate after process ID, PID dies

       -q, --quiet, --silent
              never output headers giving file names

       --retry
              keep trying to open a file if it is inaccessible

       -s, --sleep-interval=N
              with  -f,  sleep  for approximately N seconds (default 1.0) be‐
              tween iterations; with inotify and --pid=P, check process P  at
              least once every N seconds

       -v, --verbose
              always output headers giving file names

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       NUM  may  have  a  multiplier  suffix:  b  512,  kB  1000,  K 1024, MB
       1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on
       for T, P, E, Z, Y.

       With  --follow  (-f),  tail defaults to following the file descriptor,
       which means that even if a tail'ed file is renamed, tail will continue
       to track its end.  This default behavior is not desirable when you re‐
       ally want to track the actual name of the file, not the file  descrip‐
       tor  (e.g.,  log  rotation).   Use  --follow=name  in that case.  That
       causes tail to track the named file in a way that accommodates  renam‐
       ing, removal and creation.

AUTHOR
       Written by Paul Rubin, David MacKenzie, Ian Lance Taylor, and Jim Mey‐
       ering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report tail translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright © 2018 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       head(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/tail>
       or available locally via: info '(coreutils) tail invocation'

GNU coreutils 8.30              September 2019                        TAIL(1)
HEAD(1)                         User Commands                         HEAD(1)

NAME
       head - output the first part of files

SYNOPSIS
       head [OPTION]... [FILE]...

DESCRIPTION
       Print  the  first 10 lines of each FILE to standard output.  With more
       than one FILE, precede each with a header giving the file name.

       With no FILE, or when FILE is -, read standard input.

       Mandatory arguments to long options are mandatory  for  short  options
       too.

       -c, --bytes=[-]NUM
              print  the  first NUM bytes of each file; with the leading '-',
              print all but the last NUM bytes of each file

       -n, --lines=[-]NUM
              print the first NUM lines instead of the  first  10;  with  the
              leading '-', print all but the last NUM lines of each file

       -q, --quiet, --silent
              never print headers giving file names

       -v, --verbose
              always print headers giving file names

       -z, --zero-terminated
              line delimiter is NUL, not newline

       --help display this help and exit

       --version
              output version information and exit

       NUM  may  have  a  multiplier  suffix:  b  512,  kB  1000,  K 1024, MB
       1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on
       for T, P, E, Z, Y.

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report head translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2018 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tail(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/head>
       or available locally via: info '(coreutils) head invocation'

GNU coreutils 8.30              September 2019                        HEAD(1)
CAT(1)                          User Commands                          CAT(1)

NAME
       cat - concatenate files and print on the standard output

SYNOPSIS
       cat [OPTION]... [FILE]...

DESCRIPTION
       Concatenate FILE(s) to standard output.

       With no FILE, or when FILE is -, read standard input.

       -A, --show-all
              equivalent to -vET

       -b, --number-nonblank
              number nonempty output lines, overrides -n

       -e     equivalent to -vE

       -E, --show-ends
              display $ at end of each line

       -n, --number
              number all output lines

       -s, --squeeze-blank
              suppress repeated empty output lines

       -t     equivalent to -vT

       -T, --show-tabs
              display TAB characters as ^I

       -u     (ignored)

       -v, --show-nonprinting
              use ^ and M- notation, except for LFD and TAB

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       cat f - g
              Output f's contents, then standard input, then g's contents.

       cat    Copy standard input to standard output.

AUTHOR
       Written by Torbjorn Granlund and Richard M. Stallman.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report cat translation bugs to <https://translationproject.org/team/>

COPYRIGHT
       Copyright  ©  2018 Free Software Foundation, Inc.  License GPLv3+: GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This is free software: you are free to  change  and  redistribute  it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       tac(1)

       Full documentation at: <https://www.gnu.org/software/coreutils/cat>
       or available locally via: info '(coreutils) cat invocation'

GNU coreutils 8.30              September 2019                         CAT(1)
CHGRP(1)                        User Commands                        CHGRP(1)

NAME
       chgrp - change group ownership

SYNOPSIS
       chgrp [OPTION]... GROUP FILE...
       chgrp [OPTION]... --reference=RFILE FILE...

DESCRIPTION
       Change  the group of each FILE to GROUP.  With --reference, change the
       group of each FILE to that of RFILE.

       -c, --changes
              like verbose but report only when a change is made

       -f, --silent, --quiet
              suppress most error messages

       -v, --verbose
              output a diagnostic for every file processed

       --dereference
              affect the referent of each symbolic  link  (this  is  the  de‐
              fault), rather than the symbolic link itself

       -h, --no-dereference
              affect  symbolic  links  instead of any referenced file (useful
              only on systems that can change the ownership of a symlink)

       --no-preserve-root
              do not treat '/' specially (the default)

       --preserve-root
              fail to operate recursively on '/'

       --reference=RFILE
              use RFILE's group rather than specifying a GROUP value

       -R, --recursive
              operate on files and directories recursively

       The following options modify how a hierarchy is traversed when the  -R
       option is also specified.  If more than one is specified, only the fi‐
       nal one takes effect.

       -H     if a command line argument is a symbolic link to  a  directory,
              traverse it

       -L     traverse every symbolic link to a directory encountered

       -P     do not traverse any symbolic links (default)

       --help display this help and exit

       --version
              output version information and exit

EXAMPLES
       chgrp staff /u
              Change the group of /u to "staff".

       chgrp -hR staff /u
              Change the group of /u and subfiles to "staff".

AUTHOR
       Written by David MacKenzie and Jim Meyering.

REPORTING BUGS
       GNU coreutils online help: <https://www.gnu.org/software/coreutils/>
       Report    chgrp    translation    bugs   to   <https://translationpro‐
       ject.org/team/>

COPYRIGHT
       Copyright © 2018 Free Software Foundation, Inc.  License  GPLv3+:  GNU
       GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
       This  is  free  software:  you are free to change and redistribute it.
       There is NO WARRANTY, to the extent permitted by law.

SEE ALSO
       chown(1), chown(2)

       Full documentation at: <https://www.gnu.org/software/coreutils/chgrp>
       or available locally via: info '(coreutils) chgrp invocation'

GNU coreutils 8.30              September 2019                       CHGRP(1)
